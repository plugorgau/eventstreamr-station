package App::EventStreamr::Config;
use Method::Signatures;
use Sys::Hostname;
use experimental 'say';
use JSON; # libjson-perl
use Config::JSON; # libconfig-json-perl
use File::Path qw(make_path);
use Carp 'croak';
use Moo;
use namespace::clean;

# ABSTRACT: A config object

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

This package provides core configuration methods. Class
will attempt to load the config via a number of different
methods and fall back to a default state.

=head1 DESCRIPTION

Provides access to configuration methods.

=cut

has 'config_path' => ( is => 'rw', default  => sub { "$ENV{HOME}/.eventstreamr/" } );
has 'config_file' => ( is => 'rw', lazy => 1, builder => 1 );
has 'roles'       => ( is => 'rw' );
has 'nickname'    => ( is => 'rw', lazy => 1, builder => 1 );
has 'room'        => ( is => 'rw', lazy => 1, default => sub { 'test_room' } );
has 'record_path' => ( is => 'rw', lazy => 1, default => sub { '/tmp/$room/$date' } );
has 'mixer'       => ( is => 'rw' );
has 'devices'     => ( is => 'rw' );
has 'run'         => ( is => 'rw', lazy => 1, default => sub { '0' } );
has 'control'     => ( is => 'rw' );
has 'stream'      => ( is => 'rw' );

# TODO: this really needs to be changed to some
# type of GUID
has 'macaddress'  => ( is => 'rw', lazy => 1, builder => 1 );

# External utilities
has 'localconfig' => ( is => 'rw', lazy => 1, builder => 1, handles => [ qw( create write config ) ] );

sub BUILD {
  my $self = shift;
  $self->_load_config;
}

method _build_config_file() {
  return $self->config_path."/config.json";
}

method _build_nickname() {
  return hostname || "default_name";
}

method _build_macaddress() {
  my $macaddress = `ifdata -ph eth0`;
  chomp $macaddress;
  return $macaddress;
}

method _build_localconfig() {
  if ( -e $self->config_file ) {
    return Config::JSON->new($self->config_file);
  } else {
    make_path($self->config_path) if ( ! -d $self->config_path ) or
      croak "Couldn't create config path $self->{config_path}";
    my $config = Config::JSON->create($self->config_file);
    $config->{config} = {
      nickname => $self->nickname,
      room => $self->room,
      record_path => $self->record_path,
      run => $self->run,
    };
    $config->write;
    return $config;
  }
}

method _load_config {
  # TODO: There has to be a better way..
  foreach my $key (keys %{$self->localconfig->{config}}) {
    $self->{$key} = $self->localconfig->{config}{$key};
  }
}

=method write

  $config->write_config();

Will write the config out to disk.

=cut

method write_config() {
  # TODO: There has to be a better way..
  foreach my $key (keys %{$self}) {
    if ( $key !~ /macaddress|localconfig/ ) {
      $self->localconfig->{config}{$key} = $self->{$key};
    }
  }
  $self->localconfig->write;
}


=method configure

  $config->configure();

Will run through configuring EventStreamr.

=cut

method configure() {
  # TODO: write configuration process
}

method prompt($question,:$default) { # inspired from here: http://alvinalexander.com/perl/edu/articles/pl010005
  if ($default) {
    say $question, "[", $default, "]: ";
  } else {
    say $question, ": ";
    $default = "";
  }

  $| = 1;               # flush
  $_ = <STDIN>;         # get input

  chomp;
  if ("$default") {
    return $_ ? $_ : $default;    # return $_ if it has a value
  } else {
    return $_;
  }
}

1;
