package App::EventStreamr::DVswitch::Running;

use v5.010;
use strict;
use warnings;
use Method::Signatures 20140224; # libmethod-signatures-perl
use Proc::ProcessTable; # libproc-processtable-perl
use IO::Socket::INET;

use Moo::Role; # libmoo-perl

# ABSTRACT: A recording role

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

This is a role wraps around the 'run_stop' of a process.

=head1 DESCRIPTION

This is a Role that can be consumed to ensure the path exists 
before allowing the record process to take place.

It requires a 'run_stop' method, so really should only be consumed
by processes that extend L<App::EventStreamr::Process>.

=cut

requires 'run_stop','status','config','id','type';

method _dvswitch_running() {
  # TODO: This is an example of what could used as a dependency for 
  # Processes. Unsure what impact Opening/closing a port per process
  # check will have on dvswitch. Probably should do something similar
  # to the original logic and set a flag.
  my $state;
  my $sock = new IO::Socket::INET ( 
    PeerAddr => $self->{config}{mixer}{host},
    PeerPort => $self->{config}{mixer}{port},
    Proto    => 'tcp'
  );

  if ($sock) {                    
    $state = 1;
    $sock->close;                    
  } else {
    $state = 0;
  } 
  return $state;   
}

around 'run_stop' => sub {
  my $orig = shift;
  my $self = shift;
  
  if ( $self->_dvswitch_running() ) {
    $orig->($self);
  } else {
    $self->status->threshold($self->{id},'dvswitch_not_running');
  }
};

1;
